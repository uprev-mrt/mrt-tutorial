/**
  * @file hts221.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for HTS221 device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Devices/RegDevice/register_device.h"
#include "hts221_regs.h"

/*user-block-top-start*/
/*user-block-top-end*/


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev;            //ptr to base register-device 
    mrt_reg_t mWhoAmI;               //Id Register
    mrt_reg_t mAvConf;               //Humidity and temperature resolution mode
    mrt_reg_t mCtrl1;                //Control register 1
    mrt_reg_t mCtrl2;                //Control register 2
    mrt_reg_t mCtrl3;                //Control register 3
    mrt_reg_t mStatus;               //Status register
    mrt_reg_t mHumidityOut;          //Relative humidity data
    mrt_reg_t mTempOut;              //Temperature data
    mrt_reg_t mH0RhX2;               //Calibration data
    mrt_reg_t mH1RhX2;               //Calibration data
    mrt_reg_t mT0DegcX8;             //Calibration data
    mrt_reg_t mT1DegcX8;             //Calibration data
    mrt_reg_t mT1t0Msb;              //Calibration data
    mrt_reg_t mH0T0Out;              //Calibration data
    mrt_reg_t mH1T0Out;              //Calibration data
    mrt_reg_t mT0Out;                //Calibration data
    mrt_reg_t mT1Out;                //Calibration data
/*user-block-struct-start*/

    int mPrevTemp;  
    int mPrevHum;

    struct{
      int16_t T0_out;
      int16_t T1_out;
      int16_t T0_degC;
      int16_t T1_degC;
      uint8_t H0_rH;
      uint8_t H1_rH;
      int16_t H0_T0_OUT;
      int16_t H1_T0_OUT;
    } mCalData;

/*user-block-struct-end*/
}hts221_t;

/**
 * @brief initializes HTS221 device for i2c bus
 * @param dev ptr to HTS221 device
 * @param i2c handle for i2c bus
 */
mrt_status_t hts_init_i2c(hts221_t* dev, mrt_i2c_handle_t i2c);

/**
  *@brief tests interface with device
  *@param dev ptr to HTS221 device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t hts_test(hts221_t* dev);

/**
  *@brief writes register of device
  *@param dev ptr to HTS221 device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define hts_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to HTS221 device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define hts_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/

/**
 * @brief reads humidity from device
 * @param dev ptr to hts221 device
 * @return relative humidity in 1/100th of a percent. i.e. 4520 = %45.2 
 */
int hts_read_humidity(hts221_t* dev);


/**
 * @brief reads temperature from device
 * @param dev ptr to hts221 device
 * @return temperature in 1/100th of a degress C. i.e. 2312 = 23.12 C 
 */
int hts_read_temp(hts221_t* dev);

/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif